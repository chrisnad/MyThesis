module formatCSRC

!---------------------------------------------------------------------------------------!
! Module permettant l'utilisation du format CSRC pour le stockage des matrices creuses  ! (Josk1)
!---------------------------------------------------------------------------------------!

!=======================================================================================!

!---------------------------------------------------------------------------------------!
!              Declaration du type matrice creuse carree au format CSRC                 !
!---------------------------------------------------------------------------------------!
  type matrice_CSRC

    ! Tableaux des valeurs non nulles

    real*8,  dimension(:), allocatable :: Da ! valeurs diagonales
    real*8,  dimension(:), allocatable :: Ua ! valeurs dans le triangle superieur
    real*8,  dimension(:), allocatable :: La ! valeurs dans le triangle inferieur
    integer, dimension(:), allocatable :: ja, ia ! tableaux concernants les indices de reperage des valeurs
   	
    integer :: nvalmax  ! Nombre de valeurs non nulles maximales dans un bloc triangulaire
    integer :: nl       ! nombre de lignes de la matrice

  end type matrice_CSRC

  contains

!---------------------------------------------------------------------------------------!
! Routine permettant d'initialiser juste en memoire une matrice creuse au format CSRC   !
!---------------------------------------------------------------------------------------!

  subroutine CSRC_init(mat,nlig,nzmax)
  implicit none

  type (matrice_CSRC), intent(inout) :: mat ! matrice creuse à declarer en memoire
  integer, intent(in) :: nlig ! nombre de lignes de la matrice à declarer
  integer (kind=8), intent(in) :: nzmax ! nombre de valeurs non nulles dans un des triangles inf ou sup.

        mat%nl = nlig
        mat%nvalmax = nzmax

        allocate(mat%Da(nlig))  ; allocate(mat%Ua(nzmax))  ;  allocate (mat%La(nzmax));
        allocate(mat%ja(nzmax)) ; allocate(mat%ia(nlig+1))

        mat%Da = 0. ; mat%Ua = 0. ; mat%La = 0. ; mat%ia = 1 ; mat%ja = 0

  end subroutine CSRC_Init

!---------------------------------------------------------------------------------------!
!  Procedure qui libere la place memoire reservee à une matrice stockee au format CSRC  !
!---------------------------------------------------------------------------------------!

  subroutine CSRC_free(mat)
  implicit none
                    
    type(matrice_CSRC), intent(inout) :: mat ! Matrice creuse dont on veut liberer la memoire
       
    deallocate(mat%Da,mat%ia,mat%ja,mat%Ua,mat%La)
              
  end subroutine CSRC_free

!---------------------------------------------------------------------------------------!
! Procedure reduisant au minimum, la taille memoire de la matrice creuse au format CSRC !
!                                 (en theorie inuntile)                                 !
!---------------------------------------------------------------------------------------!

  subroutine CSRC_reduc_taille(mat)
    implicit none
       
    type(matrice_CSRC), intent(inout) :: mat ! matrice dont on veut reduire la taille
       
       real*8, dimension(:), allocatable :: aux1 ! tab de passage pour la copie des valeurs de Ua et La
       integer, dimension(:), allocatable :: aux2! tab de passage pour la copie des valeurs de ja 
       integer :: taille
       
       taille = mat%ia(mat%nl+1) - 1 ! Donne le nombre de valeurs non nulles dans un des triangles

       ! Reduction de la taille des tableaux de valeurs mat%La et mat%Ua
       allocate(aux1(taille)); 
       aux1 = mat%La(1:taille);
       deallocate(mat%La); 
       allocate(mat%La(taille)); 
       mat%La = aux1
       aux1 = mat%Ua(1:taille);
       deallocate(mat%Ua); 
       allocate(mat%Ua(taille)); 
       mat%Ua=aux1
       deallocate(aux1)
       
       ! Reduction de la taille du tableau des indices des colonnes ja
       allocate(aux2(taille)); 
       aux2 = mat%ja(1:taille);
       deallocate(mat%ja); 
       allocate(mat%ja(taille)); 
       mat%ja = aux2
       deallocate(aux2)
       
       mat%nvalmax = taille      
       
end subroutine CSRC_reduc_taille

!---------------------------------------------------------------------------------------!
!      Routine effectuant le produit d'une matrice  au format CSRC avec un vecteur      !
!---------------------------------------------------------------------------------------!

subroutine ProdMatVect(A,u,p)
   
   implicit none

   type(matrice_CSRC), intent(in) :: A   ! matrice creuse au format CSRC
   real*8, dimension(:), intent(in) :: u   ! vecteur d'entree
   real*8, dimension(:), intent(inout) :: p ! vecteur resultat
   integer :: i, k
   real*8 :: t

   p = 0.0
   do i = 1, A%nl
     t = A%Da(i)*u(i)     ! calcul de la contribution diagonale
        
        do k = A%ia(i),A%ia(i+1) - 1               
            t = t + A%La(k)*u(A%ja(k)) ! contribution de la portion de la i eme ligne du triangle inferieur de A sur P(i) 
            p(A%ja(k)) = p(A%ja(k))+A%Ua(k)*u(i) !  contribution de la colonne associee sur les autres termes de p
        end do
        p(i) = t
   end do

end subroutine ProdMatVect

!---------------------------------------------------------------------------------------!
! Routine effectuant le produit d'une matrice symetrique au format CSRC avec un vecteur !
!---------------------------------------------------------------------------------------!

subroutine ProdMatSymVect(A,u,p)
   implicit none

   type(matrice_CSRC), intent(in) :: A      ! matrice creuse au format CSRC
   real*8, dimension(:), intent(in) :: u    ! vecteur d'entree
   real*8, dimension(:), intent(inout) :: p ! vecteur resultat
   integer :: i, k
   real*8 :: t
   
   p = 0.0

   do i = 1, A%nl
     t = A%Da(i)*u(i) ! calcul de la contribution diagonale
        
        do k = A%ia(i),A%ia(i+1) - 1                
            t=t+A%La(k)*u(A%ja(k))
            p(A%ja(k))=p(A%ja(k))+A%La(k)*u(i)        
        end do
        p(i) = t        
   end do

 end subroutine ProdMatSymVect

!---------------------------------------------------------------------------------------!
!        Routine permettant l'assemblage rapide d'une matrice elementaire dense         !
!                           dans une matrice au format CSRC                             !
!---------------------------------------------------------------------------------------!

  subroutine Assem_rapide22(matg,matelem,indice)

    implicit none

    type(matrice_CSRC), intent(inout) :: matg  ! matrice creuse au format CSRC
    real*8, dimension(:,:), intent(in):: matelem ! matrice elementaire
    integer, dimension(:), intent(in) :: indice ! indices ou l'on doit inserer les valeurs de la matrice
    integer:: i, j, k, tailleind

    ! test, on verifie que les indices dinsertion sont corrects

	!if (any(indice > matg%nl)) STOP 'formatCSRC: mauvais indicage pour insertion dans la matrice globale'

    do i=1, size(indice) 
       if(indice(i)>matg%nl) STOP 'formatCSRC: mauvais indicage pour insertion dans la matrice globale'
    end do

    tailleind = size(indice)

    ! On traite d'abord les valeurs diagonales de matelem
    do i = 1, tailleind
       matg%Da(indice(i)) = matg%Da(indice(i)) + matelem(i,i)
    end do

    ! On passe aux valeurs non diagonales de matelem
    do i = 2, tailleind ! On parcourt sur les valeurs du triangle inferieur de matelem
        do j = 1, i-1
            ! Cas ou l'on insere la valeur dans le triangle inferieur de matg
            if (indice(j)<indice(i)) then 
                do k = matg%ia(indice(i)),matg%ia(indice(i)+1)-1                         
	                if (matg%ja(k)==indice(j)) then
                        if (matelem(i,j)/=0.) matg%La(k)=matg%La(k)+matelem(i,j)
                        if (matelem(j,i)/=0.) matg%Ua(k)=matg%Ua(k)+matelem(j,i)!tant qu a faire on insere aussi la valeur symetrique de matelem
                        exit
                    end if
                end do  
            end if
                
            ! Cas ou l'on insere la valeur dans le triangle superieur de matg  
            if (indice(i)<indice(j)) then                              
                do k = matg%ia(indice(j)),matg%ia(indice(j)+1)-1                                
                    if( matg%ja(k)==indice(i)) then                               
                        if (matelem(i,j)/=0.) matg%Ua(k)=matg%Ua(k)+matelem(i,j)
                        if (matelem(j,i)/=0.) matg%La(k)=matg%La(k)+matelem(j,i) !tant qu a faire on insère aussi la valeur symetrique de matelem
                        exit    
                    end if
                end do               
            end if
       end do 
    end do
	
  end subroutine Assem_rapide22

!---------------------------------------------------------------------------------------!
!                  Teste si une matrice est bien symetrique                             !
!---------------------------------------------------------------------------------------!
  subroutine testSYM_CSRC(A,sym)

    logical,intent(inout):: SYM
    type (matrice_CSRC),intent(in)::A
    integer :: i
	
    SYM = .true.
    
	do i = 1, A%ia(A%nl+1)-1 
        if (A%La(i)/=A%Ua(i)) then
           SYM = .false.
           exit
        end if
    end do
	
    if (SYM) then
       print*, 'la matrice est symetrique'
    else
       print*,'la matrice nest pas symetrique'
    end if
	
  end subroutine testSYM_CSRC

!---------------------------------------------------------------------------------------!
!                 Routine accedant à l'element i,j d'une matrice CSRC                   !
!---------------------------------------------------------------------------------------!

  function CSRC_val(A,i,j) result(valeur)

    type(matrice_CSRC), intent(in) :: A
    integer, intent(in) :: i, j
    real*8 :: valeur
    integer :: k

    valeur = 0.

    if (i>A%nl.or.i<0.or.i>A%nl.or.i<0.or.i>A%nl) &
       & stop 'CSRC_val : erreur, les valeurs sont incorrectes, hors champs'

    if (i==j) then
        valeur = A%Da(i)		
    elseif (i>j) then
        do k = A%ia(i),A%ia(i+1)-1      
           if (j==A%ja(k)) then
              valeur = A%La(k)
              exit
           end if
!           valeur = 0.
        end do
    else
        do k = A%ia(j), A%ia(j+1)-1      
           if (i==A%ja(k)) then
               valeur = A%Ua(k)
               exit
           end if
!           valeur = 0.
        end do    
    end if

  end function CSRC_val

!---------------------------------------------------------------------------------------!
!                  Routine modifiant l''element i,j d'une matrice CSRC                  !
!                    (si la position existe deja sinon ne fais rien)                    !
!---------------------------------------------------------------------------------------!

  subroutine CSRC_set(A,i,j,valeur)

    type(matrice_CSRC), intent(inout) :: A
    integer, intent(in) :: i, j
    real*8, intent(in) :: valeur ! nouvelle valeur
    integer :: k

    if (i>A%nl.or.i<0.or.i>A%nl.or.i<0.or.i>A%nl) &
       &  stop 'CSRC_set :erreur, les valeurs sont incorrectes, hors champs'

    if (i==j) then
        A%Da(i) = valeur    
	elseif (i>j) then
        do k = A%ia(i),A%ia(i+1)-1      
           if (j==A%ja(k)) then
               A%La(k) = valeur
               exit
           end if           
        end do
    else
       do k = A%ia(j), A%ia(j+1)-1      
           if (i==A%ja(k)) then
              A%Ua(k) = valeur
              exit
           end if           
       end do
    end if

  end subroutine CSRC_set

!---------------------------------------------------------------------------------------!
!          Routine mettant a 0 la ligne et la colonne "ic" de la matrice CSRC           !
!---------------------------------------------------------------------------------------!

  subroutine CSRC_lig_col_zero(A,ic)

    type(matrice_CSRC), intent(inout) :: A
    integer, intent(in) :: ic
    integer :: k, m

    A%Da(ic) = 0.

! 1ere partie des valeurs mise à 0 (axes -x,+y)

    do k = A%ia(ic), A%ia(ic+1)-1
       A%La(k) = 0.
       A%Ua(k) = 0.
    end do

! 2eme partie des valeurs mise a 0 (axes -y,+x)

    do k = ic+1,A%nl
       do m=A%ia(k),A%ia(k+1)-1 
          if(A%ja(m)==ic) then
             A%La(m)=0.
             A%Ua(m)=0. 
             exit
          end if
       end do
    end do

  end subroutine CSRC_lig_col_zero
end module formatCSRC
